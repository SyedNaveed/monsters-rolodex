{"version":3,"sources":["components/card/Card.js","components/searchBox/SearchBox.js","components/card-list/CardList.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","SearchBox","placeholder","handleChange","type","onChange","CardList","useState","setMonster","searchField","setSearchField","monsterSearch","setMonsterSearch","useEffect","fetch","then","response","json","users","filter","monsters","toLowerCase","includes","e","target","value","map","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAceA,MAXf,SAAcC,GACV,OACI,sBAAKC,UAAU,iBAAf,UAEI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAQL,EAAMI,QAAQE,KAAtB,OACA,4BAAKN,EAAMI,QAAQG,Y,MCGhBC,MATf,YAAiD,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aAE7B,OACI,uBAAOT,UAAU,SAASU,KAAK,SAASF,YAAaA,EAAaG,SAAUF,KC2DrEG,MA5Df,SAAkBb,GAAO,MAGSc,mBAAS,IAHlB,mBAGdV,EAHc,KAGLW,EAHK,OAKiBD,mBAAS,IAL1B,mBAKdE,EALc,KAKDC,EALC,OAOqBH,mBAAS,IAP9B,mBAOdI,EAPc,KAOCC,EAPD,KAkCrB,OAzBAC,qBAAU,WAENC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MACG,SAAAG,GACAN,EAAiBM,GACjBV,EAAWU,QAGpB,IAIHL,qBAAU,WAEND,EAAiBf,EAAQsB,QAAO,SAAAC,GAAQ,OAAIA,EAASrB,KAAKsB,cAAcC,SAASb,EAAYY,qBAG7F,CAACZ,IAOD,qCAII,kDACA,cAAC,EAAD,CACIP,YAAY,eACZC,aAAe,SAAAoB,GACXb,EAAea,EAAEC,OAAOC,UAKhC,qBAAK/B,UAAU,YAAf,SAEQiB,EAAce,KAAI,SAACN,GACf,OAAO,cAAC,EAAD,CAAwBvB,QAASuB,GAAtBA,EAAStB,aCzCpC6B,MAVf,SAAalC,GAEX,OACE,qBAAKC,UAAU,MAAf,SAEE,cAAC,EAAD,OCESkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8de011c7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className='card-container' >\r\n            {/* { console.log(props) }  */}\r\n            <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n            <h2 > { props.monster.name  } </h2>\r\n            <p>{ props.monster.email }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nfunction SearchBox({placeholder, handleChange}) {\r\n    \r\n    return (\r\n        <input className='search' type='search' placeholder={placeholder} onChange={handleChange}  />\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default SearchBox;","import React, { useState, useEffect } from 'react';\r\nimport './CardList.css';\r\nimport Card from '../card/Card';\r\nimport SearchBox from '../searchBox/SearchBox';\r\n\r\nfunction CardList(props) {\r\n\r\n    // used state hook \r\n    const [monster, setMonster] = useState([]);\r\n    // define search field \r\n    const [searchField, setSearchField] = useState('');\r\n    // used state search hook \r\n    const [monsterSearch, setMonsterSearch] = useState([]);\r\n    // to get the data from api \r\n    useEffect(() => {\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(\r\n                users => {\r\n                setMonsterSearch(users)\r\n                setMonster(users)\r\n            })\r\n\r\n    }, [])\r\n\r\n\r\n    //  pass the array to moster \r\n    useEffect(() => {\r\n        //   for search filter \r\n        setMonsterSearch(monster.filter(monsters => monsters.name.toLowerCase().includes(searchField.toLowerCase())))\r\n\r\n    },\r\n        [searchField] // it will trigger when this field value update \r\n    )\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* <input type='search' placeholder='search monsters' onChange={e => {\r\n                // setSearchField(e.target.value);\r\n            }} /> */}\r\n            <h1>Monsters Rolodex</h1>\r\n            <SearchBox \r\n                placeholder='moster names'\r\n                handleChange={ e => {\r\n                    setSearchField(e.target.value);\r\n                    }\r\n                }\r\n             />\r\n\r\n            <div className='card-list' >\r\n                {\r\n                    monsterSearch.map((monsters) => {\r\n                        return <Card key={monsters.id} monster={monsters} />\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardList;"," \nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport CardList from './components/card-list/CardList';\n\nfunction App(props) {\n\n  return (\n    <div className=\"App\">\n      \n      <CardList  /> \n   </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}